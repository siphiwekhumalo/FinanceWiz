name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test & Quality Analysis
    runs-on: ubuntu-latest
    
    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        options: >-
          --health-cmd="curl -f http://localhost:9000/api/system/status | grep -q UP || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation check
      run: npx tsc --noEmit

    - name: ESLint code quality
      run: npx eslint . --ext .ts,.tsx --report-unused-disable-directives --max-warnings 0

    - name: Run Jest tests with coverage
      run: npx jest --config jest.config.mjs --coverage --ci --watchAll=false

    - name: Run Stryker mutation tests
      run: npx stryker run
      continue-on-error: true

    - name: Wait for SonarQube to be ready
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:9000/api/system/status | grep -q UP; do sleep 5; done'

    - name: Run SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://localhost:9000
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=financial-chart-dashboard \
          -Dsonar.sources=client/src,server,shared \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx \
          -Dsonar.cpd.exclusions=**/*.test.ts,**/*.test.tsx \
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.test.ts,**/*.test.tsx

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          reports/
          stryker-reports/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/

    - name: Deploy to Replit
      run: |
        echo "Deployment to Replit would happen here"
        # Add actual deployment commands based on your deployment strategy